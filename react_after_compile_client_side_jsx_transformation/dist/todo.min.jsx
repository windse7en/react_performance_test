var app = app || {};(function () {  'use strict';  var ESCAPE_KEY = 27;  var ENTER_KEY = 13;  app.TodoItem = React.createClass({    handleSubmit: function (event) {      var val = this.state.editText.trim();      if (val) {        this.props.onSave(val);        this.setState({editText: val});      } else {        this.props.onDestroy();      }    },    handleEdit: function () {      this.props.onEdit();      this.setState({editText: this.props.todo.title});    },    handleKeyDown: function (event) {      if (event.which === ESCAPE_KEY) {        this.setState({editText: this.props.todo.title});        this.props.onCancel(event);      } else if (event.which === ENTER_KEY) {        this.handleSubmit(event);      }    },    handleChange: function (event) {      if (this.props.editing) {        this.setState({editText: event.target.value});      }    },    getInitialState: function () {      return {editText: this.props.todo.title};    },    shouldComponentUpdate: function (nextProps, nextState) {      return (        nextProps.todo !== this.props.todo ||        nextProps.editing !== this.props.editing ||        nextState.editText !== this.state.editText      );    },   componentDidUpdate: function (prevProps) {      if (!prevProps.editing && this.props.editing) {        var node = React.findDOMNode(this.refs.editField);        node.focus();        node.setSelectionRange(node.value.length, node.value.length);      }    },    render: function () {      return (        <li className={classNames({          completed: this.props.todo.completed,          editing: this.props.editing        })}>          <div className="view">            <input              className="toggle"              type="checkbox"              checked={this.props.todo.completed}              onChange={this.props.onToggle}            />            <label onDoubleClick={this.handleEdit}>              {this.props.todo.title}            </label>            <button className="destroy" onClick={this.props.onDestroy} />          </div>          <input            ref="editField"            className="edit"            value={this.state.editText}            onBlur={this.handleSubmit}            onChange={this.handleChange}            onKeyDown={this.handleKeyDown}          />        </li>      );    }  });})();var app = app || {};(function () {  'use strict';  app.TodoFooter = React.createClass({    render: function () {      var activeTodoWord = app.Utils.pluralize(this.props.count, 'item');      var clearButton = null;      if (this.props.completedCount > 0) {        clearButton = (          <button            className="clear-completed"            onClick={this.props.onClearCompleted}>            Clear completed          </button>        );      }      var nowShowing = this.props.nowShowing;      return (        <footer className="footer">          <span className="todo-count">            <strong>{this.props.count}</strong> {activeTodoWord} left          </span>          <ul className="filters">            <li>              <a                href="#/"                className={classNames({selected: nowShowing === app.ALL_TODOS})}>                  All              </a>            </li>            {' '}            <li>              <a                href="#/active"                className={classNames({selected: nowShowing === app.ACTIVE_TODOS})}>                  Active              </a>            </li>            {' '}            <li>              <a                href="#/completed"                className={classNames({selected: nowShowing === app.COMPLETED_TODOS})}>                  Completed              </a>            </li>          </ul>          {clearButton}        </footer>      );    }  });})();var app = app || {};(function () {  'use strict';  app.ALL_TODOS = 'all';  app.ACTIVE_TODOS = 'active';  app.COMPLETED_TODOS = 'completed';  var TodoFooter = app.TodoFooter;  var TodoItem = app.TodoItem;  var ENTER_KEY = 13;  var TodoApp = React.createClass({    getInitialState: function () {      return {        nowShowing: app.ALL_TODOS,        editing: null,        newTodo: ''      };    },    componentDidMount: function () {      var setState = this.setState;      var router = Router({        '/': setState.bind(this, {nowShowing: app.ALL_TODOS}),        '/active': setState.bind(this, {nowShowing: app.ACTIVE_TODOS}),        '/completed': setState.bind(this, {nowShowing: app.COMPLETED_TODOS})      });      router.init('/');    },    handleChange: function (event) {      this.setState({newTodo: event.target.value});    },    handleNewTodoKeyDown: function (event) {      if (event.keyCode !== ENTER_KEY) {        return;      }      event.preventDefault();      var val = this.state.newTodo.trim();      if (val) {        this.props.model.addTodo(val);        this.setState({newTodo: ''});      }    },    toggleAll: function (event) {      var checked = event.target.checked;      this.props.model.toggleAll(checked);    },    toggle: function (todoToToggle) {      this.props.model.toggle(todoToToggle);    },    destroy: function (todo) {      this.props.model.destroy(todo);    },    edit: function (todo) {      this.setState({editing: todo.id});    },    save: function (todoToSave, text) {      this.props.model.save(todoToSave, text);      this.setState({editing: null});    },    cancel: function () {      this.setState({editing: null});    },    clearCompleted: function () {      this.props.model.clearCompleted();    },    render: function () {      var footer;      var main;      var todos = this.props.model.todos;      var shownTodos = todos.filter(function (todo) {        switch (this.state.nowShowing) {        case app.ACTIVE_TODOS:          return !todo.completed;        case app.COMPLETED_TODOS:          return todo.completed;        default:          return true;        }      }, this);      var todoItems = shownTodos.map(function (todo) {        return (          <TodoItem            key={todo.id}            todo={todo}            onToggle={this.toggle.bind(this, todo)}            onDestroy={this.destroy.bind(this, todo)}            onEdit={this.edit.bind(this, todo)}            editing={this.state.editing === todo.id}            onSave={this.save.bind(this, todo)}            onCancel={this.cancel}          />        );      }, this);      var activeTodoCount = todos.reduce(function (accum, todo) {        return todo.completed ? accum : accum + 1;      }, 0);      var completedCount = todos.length - activeTodoCount;      if (activeTodoCount || completedCount) {        footer =          <TodoFooter            count={activeTodoCount}            completedCount={completedCount}            nowShowing={this.state.nowShowing}            onClearCompleted={this.clearCompleted}          />;      }      if (todos.length) {        main = (          <section className="main">            <input              className="toggle-all"              type="checkbox"              onChange={this.toggleAll}              checked={activeTodoCount === 0}            />            <ul className="todo-list">              {todoItems}            </ul>          </section>        );      }      return (        <div>          <header className="header">            <h1>todos</h1>            <input              className="new-todo"              placeholder="What needs to be done?"              value={this.state.newTodo}              onKeyDown={this.handleNewTodoKeyDown}              onChange={this.handleChange}              autoFocus={true}            />          </header>          {main}          {footer}        </div>      );    }  });  var model = new app.TodoModel('react-todos');  function render() {    React.render(      <TodoApp model={model}/>,      document.getElementsByClassName('todoapp')[0]    );  }  model.subscribe(render);  render();})();
